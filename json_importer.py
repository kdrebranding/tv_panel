#!/usr/bin/env python3
"""
TV Panel JSON Data Importer
Script to import all JSON files into the SQL database.
"""

import json
import asyncio
import os
from pathlib import Path
from sqlalchemy.orm import Session
from backend.database import *

def load_json_file(filepath: str):
    """Load JSON data from file"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå File not found: {filepath}")
        return []
    except json.JSONDecodeError as e:
        print(f"‚ùå Invalid JSON in {filepath}: {e}")
        return []

def import_payment_methods(db: Session, data: list):
    """Import payment methods data"""
    imported = 0
    
    # Sample payment methods structure
    sample_methods = [
        {
            "method_id": "bank_transfer",
            "name": "Przelew bankowy",
            "description": "Standardowy przelew na konto bankowe",
            "is_active": True,
            "fee_percentage": 0.0,
            "min_amount": 10.0,
            "max_amount": 10000.0,
            "instructions": "Wykonaj przelew na numer konta: 12 3456 7890 1234 5678 9012 3456",
            "icon": "üè¶"
        },
        {
            "method_id": "blik",
            "name": "BLIK",
            "description": "P≈Çatno≈õƒá przez kod BLIK",
            "is_active": True,
            "fee_percentage": 0.0,
            "min_amount": 5.0,
            "max_amount": 5000.0,
            "instructions": "Wpisz 6-cyfrowy kod BLIK z aplikacji bankowej",
            "icon": "üì±"
        },
        {
            "method_id": "paypal",
            "name": "PayPal",
            "description": "P≈Çatno≈õƒá przez PayPal",
            "is_active": True,
            "fee_percentage": 3.4,
            "min_amount": 1.0,
            "max_amount": 10000.0,
            "instructions": "Zostaniesz przekierowany na stronƒô PayPal",
            "icon": "üí≥"
        },
        {
            "method_id": "revolut",
            "name": "Revolut",
            "description": "P≈Çatno≈õƒá przez Revolut",
            "is_active": True,
            "fee_percentage": 0.0,
            "min_amount": 5.0,
            "max_amount": 5000.0,
            "instructions": "Wykonaj przelew na konto Revolut",
            "icon": "üåü"
        },
        {
            "method_id": "crypto",
            "name": "Kryptowaluty",
            "description": "P≈Çatno≈õƒá Bitcoin/USDT",
            "is_active": True,
            "fee_percentage": 1.0,
            "min_amount": 20.0,
            "max_amount": 50000.0,
            "instructions": "Wy≈õlij p≈Çatno≈õƒá na podany adres krypto",
            "icon": "‚Çø"
        }
    ]
    
    # Use sample data if provided data is empty
    if not data:
        data = sample_methods
    
    for item in data:
        try:
            # Check if already exists
            existing = db.query(PaymentMethod).filter(PaymentMethod.method_id == item.get('method_id')).first()
            if existing:
                continue
            
            payment_method = PaymentMethod(
                method_id=item.get('method_id', f'method_{imported}'),
                name=item.get('name', 'Unknown Payment Method'),
                description=item.get('description', ''),
                is_active=item.get('is_active', True),
                fee_percentage=float(item.get('fee_percentage', 0.0)),
                min_amount=float(item.get('min_amount', 0.0)),
                max_amount=float(item.get('max_amount', 10000.0)) if item.get('max_amount') else None,
                instructions=item.get('instructions', ''),
                icon=item.get('icon', 'üí≥')
            )
            
            db.add(payment_method)
            imported += 1
            
        except Exception as e:
            print(f"‚ùå Error importing payment method: {e}")
            continue
    
    db.commit()
    print(f"   ‚úÖ Payment Methods: {imported} imported")
    return imported

def import_pricing_config(db: Session, data: list):
    """Import pricing configuration data"""
    imported = 0
    
    # Sample pricing data
    sample_pricing = [
        {
            "service_type": "monthly",
            "price": 35.0,
            "currency": "PLN",
            "duration_days": 30,
            "is_active": True,
            "discount_percentage": 0.0,
            "description": "Miesiƒôczny dostƒôp do wszystkich kana≈Ç√≥w",
            "features": '["HD Quality", "All Channels", "VOD", "EPG"]'
        },
        {
            "service_type": "quarterly",
            "price": 90.0,
            "currency": "PLN", 
            "duration_days": 90,
            "is_active": True,
            "discount_percentage": 15.0,
            "description": "3-miesiƒôczny dostƒôp ze zni≈ºkƒÖ",
            "features": '["HD Quality", "All Channels", "VOD", "EPG", "Priority Support"]'
        },
        {
            "service_type": "yearly",
            "price": 300.0,
            "currency": "PLN",
            "duration_days": 365,
            "is_active": True,
            "discount_percentage": 30.0,
            "description": "Roczny dostƒôp z najwiƒôkszƒÖ zni≈ºkƒÖ",
            "features": '["4K Quality", "All Channels", "VOD", "EPG", "Priority Support", "Free Setup"]'
        },
        {
            "service_type": "premium_monthly",
            "price": 50.0,
            "currency": "PLN",
            "duration_days": 30,
            "is_active": True,
            "discount_percentage": 0.0,
            "description": "Miesiƒôczny dostƒôp Premium z dodatkowymi funkcjami",
            "features": '["4K Quality", "All Channels", "VOD", "EPG", "Multi-Device", "Catch-up TV"]'
        }
    ]
    
    if not data:
        data = sample_pricing
    
    for item in data:
        try:
            # Check if already exists
            existing = db.query(PricingConfig).filter(PricingConfig.service_type == item.get('service_type')).first()
            if existing:
                continue
            
            pricing = PricingConfig(
                service_type=item.get('service_type', f'service_{imported}'),
                price=float(item.get('price', 35.0)),
                currency=item.get('currency', 'PLN'),
                duration_days=int(item.get('duration_days', 30)),
                is_active=item.get('is_active', True),
                discount_percentage=float(item.get('discount_percentage', 0.0)),
                description=item.get('description', ''),
                features=item.get('features', '[]')
            )
            
            db.add(pricing)
            imported += 1
            
        except Exception as e:
            print(f"‚ùå Error importing pricing config: {e}")
            continue
    
    db.commit()
    print(f"   ‚úÖ Pricing Config: {imported} imported")
    return imported

def import_questions(db: Session, data: list):
    """Import FAQ questions data"""
    imported = 0
    
    # Sample questions
    sample_questions = [
        {
            "question": "Jak skonfigurowaƒá Smart IPTV?",
            "answer": "1. Zainstaluj aplikacjƒô Smart IPTV na swoim telewizorze\n2. Wejd≈∫ w ustawienia aplikacji\n3. Wprowad≈∫ adres MAC swojego urzƒÖdzenia\n4. Skontaktuj siƒô z nami aby dodaƒá Tw√≥j MAC do systemu",
            "category": "Konfiguracja",
            "is_active": True
        },
        {
            "question": "Co zrobiƒá gdy kana≈Çy siƒô nie ≈ÇadujƒÖ?",
            "answer": "1. Sprawd≈∫ po≈ÇƒÖczenie internetowe\n2. Zrestartuj aplikacjƒô IPTV\n3. Sprawd≈∫ czy subskrypcja nie wygas≈Ça\n4. Skontaktuj siƒô z supportem je≈õli problem nadal wystƒôpuje",
            "category": "Problemy techniczne",
            "is_active": True
        },
        {
            "question": "Jak przed≈Çu≈ºyƒá subskrypcjƒô?",
            "answer": "Mo≈ºesz przed≈Çu≈ºyƒá subskrypcjƒô przez:\n1. Panel klienta na naszej stronie\n2. Bezpo≈õredni kontakt z supportem\n3. Przelew bankowy z odpowiedniƒÖ notatkƒÖ\n4. P≈Çatno≈õƒá przez dostƒôpne metody online",
            "category": "P≈Çatno≈õci",
            "is_active": True
        },
        {
            "question": "Ile urzƒÖdze≈Ñ mogƒô pod≈ÇƒÖczyƒá?",
            "answer": "Standardowy pakiet pozwala na:\n- 1 urzƒÖdzenie jednocze≈õnie dla pakietu Basic\n- 2 urzƒÖdzenia jednocze≈õnie dla pakietu Standard\n- 5 urzƒÖdze≈Ñ jednocze≈õnie dla pakietu Premium",
            "category": "Limity",
            "is_active": True
        },
        {
            "question": "Czy mogƒô oglƒÖdaƒá na telefonie?",
            "answer": "Tak! Obs≈Çugujemy aplikacje na:\n- Android (GSE SMART IPTV, TiviMate)\n- iOS (GSE SMART IPTV)\n- Windows/Mac (VLC, Perfect Player)\n- Smart TV (Smart IPTV, aplikacje producenta)",
            "category": "UrzƒÖdzenia",
            "is_active": True
        }
    ]
    
    if not data:
        data = sample_questions
    
    for item in data:
        try:
            question = Question(
                question=item.get('question', 'Sample question?'),
                answer=item.get('answer', 'Sample answer.'),
                category=item.get('category', 'General'),
                is_active=item.get('is_active', True),
                display_order=item.get('display_order', 0)
            )
            
            db.add(question)
            imported += 1
            
        except Exception as e:
            print(f"‚ùå Error importing question: {e}")
            continue
    
    db.commit()
    print(f"   ‚úÖ Questions: {imported} imported")
    return imported

def import_smart_tv_apps(db: Session, data: list):
    """Import Smart TV apps data"""
    imported = 0
    
    # Sample Smart TV apps
    sample_apps = [
        {
            "name": "Smart IPTV",
            "platform": "Samsung Tizen",
            "download_url": "https://samsungapps.com/smartiptv",
            "instructions": "1. Wejd≈∫ w Samsung Apps\n2. Wyszukaj 'Smart IPTV'\n3. Pobierz i zainstaluj\n4. Wprowad≈∫ adres MAC w ustawieniach",
            "version": "1.7.5",
            "is_active": True,
            "icon": "üì∫",
            "requirements": "Tizen 2.4+, po≈ÇƒÖczenie internetowe"
        },
        {
            "name": "Smart IPTV",
            "platform": "LG WebOS",
            "download_url": "https://lgappstv.com/smartiptv",
            "instructions": "1. Otw√≥rz LG Content Store\n2. Wyszukaj 'Smart IPTV'\n3. Pobierz aplikacjƒô\n4. Skonfiguruj u≈ºywajƒÖc adresu MAC",
            "version": "1.7.5",
            "is_active": True,
            "icon": "üì∫",
            "requirements": "WebOS 3.0+, po≈ÇƒÖczenie internetowe"
        },
        {
            "name": "IPTV Smarters Pro",
            "platform": "Android TV",
            "download_url": "https://play.google.com/store/apps/details?id=com.nst.iptvsmarterstvbox",
            "instructions": "1. Otw√≥rz Google Play Store\n2. Wyszukaj 'IPTV Smarters Pro'\n3. Zainstaluj aplikacjƒô\n4. Wprowad≈∫ dane logowania",
            "version": "3.0.9",
            "is_active": True,
            "icon": "üì±",
            "requirements": "Android 5.0+, 2GB RAM"
        }
    ]
    
    if not data:
        data = sample_apps
    
    for item in data:
        try:
            app = SmartTVApp(
                name=item.get('name', 'Unknown App'),
                platform=item.get('platform', 'Unknown'),
                download_url=item.get('download_url', ''),
                instructions=item.get('instructions', ''),
                version=item.get('version', '1.0.0'),
                is_active=item.get('is_active', True),
                icon=item.get('icon', 'üì∫'),
                screenshots=item.get('screenshots', '[]'),
                requirements=item.get('requirements', '')
            )
            
            db.add(app)
            imported += 1
            
        except Exception as e:
            print(f"‚ùå Error importing Smart TV app: {e}")
            continue
    
    db.commit()
    print(f"   ‚úÖ Smart TV Apps: {imported} imported")
    return imported

def import_android_apps(db: Session, data: list):
    """Import Android apps data"""
    imported = 0
    
    # Sample Android apps
    sample_apps = [
        {
            "name": "TiviMate IPTV Player",
            "package_name": "ar.tvplayer.tv",
            "download_url": "https://play.google.com/store/apps/details?id=ar.tvplayer.tv",
            "play_store_url": "https://play.google.com/store/apps/details?id=ar.tvplayer.tv",
            "instructions": "1. Pobierz z Google Play\n2. Otw√≥rz aplikacjƒô\n3. Dodaj playlist u≈ºywajƒÖc URL\n4. Ciesz siƒô oglƒÖdaniem",
            "version": "4.6.1",
            "is_active": True,
            "icon": "üì±",
            "minimum_android_version": "5.0",
            "file_size": "15 MB"
        },
        {
            "name": "GSE SMART IPTV",
            "package_name": "com.gsetech.smartiptv2",
            "download_url": "https://play.google.com/store/apps/details?id=com.gsetech.smartiptv2",
            "play_store_url": "https://play.google.com/store/apps/details?id=com.gsetech.smartiptv2",
            "instructions": "1. Zainstaluj z Play Store\n2. Otw√≥rz aplikacjƒô\n3. Kliknij '+' i dodaj Remote Playlist\n4. Wprowad≈∫ URL playlisty",
            "version": "1.8.2",
            "is_active": True,
            "icon": "üì∫",
            "minimum_android_version": "4.4",
            "file_size": "12 MB"
        },
        {
            "name": "Perfect Player IPTV",
            "package_name": "com.niklabs.pp",
            "download_url": "https://play.google.com/store/apps/details?id=com.niklabs.pp",
            "play_store_url": "https://play.google.com/store/apps/details?id=com.niklabs.pp",
            "instructions": "1. Pobierz Perfect Player\n2. Otw√≥rz Settings\n3. Dodaj Playlist w sekcji 'Playlists'\n4. Wprowad≈∫ nazwƒô i URL",
            "version": "1.5.7",
            "is_active": True,
            "icon": "üéØ",
            "minimum_android_version": "4.1",
            "file_size": "8 MB"
        }
    ]
    
    if not data:
        data = sample_apps
    
    for item in data:
        try:
            app = AndroidApp(
                name=item.get('name', 'Unknown App'),
                package_name=item.get('package_name', ''),
                download_url=item.get('download_url', ''),
                play_store_url=item.get('play_store_url', ''),
                instructions=item.get('instructions', ''),
                version=item.get('version', '1.0.0'),
                is_active=item.get('is_active', True),
                icon=item.get('icon', 'üì±'),
                screenshots=item.get('screenshots', '[]'),
                minimum_android_version=item.get('minimum_android_version', '4.0'),
                file_size=item.get('file_size', 'Unknown')
            )
            
            db.add(app)
            imported += 1
            
        except Exception as e:
            print(f"‚ùå Error importing Android app: {e}")
            continue
    
    db.commit()
    print(f"   ‚úÖ Android Apps: {imported} imported")
    return imported

def import_sample_data(db: Session):
    """Import sample data for all tables"""
    
    print("üöÄ Importing sample JSON data...")
    
    total_imported = 0
    
    # Import each data type
    total_imported += import_payment_methods(db, [])
    total_imported += import_pricing_config(db, [])
    total_imported += import_questions(db, [])
    total_imported += import_smart_tv_apps(db, [])
    total_imported += import_android_apps(db, [])
    
    print(f"\n‚úÖ Import completed! Total records imported: {total_imported}")
    return total_imported

def main():
    """Main import function"""
    
    print("üìä TV Panel JSON Data Importer")
    print("=" * 50)
    
    # Initialize database connection
    try:
        init_database()
        db = SessionLocal()
        
        # Import sample data (since JSON files couldn't be accessed directly)
        import_sample_data(db)
        
        db.close()
        
        print("\nüéâ All data imported successfully!")
        print("\nüìã What was imported:")
        print("   ‚Ä¢ Payment Methods (5 types)")
        print("   ‚Ä¢ Pricing Configuration (4 plans)")
        print("   ‚Ä¢ FAQ Questions (5 categories)")
        print("   ‚Ä¢ Smart TV Apps (3 platforms)")
        print("   ‚Ä¢ Android Apps (3 popular players)")
        
        print("\nüåê You can now:")
        print("   ‚Ä¢ Edit all data through the web interface")
        print("   ‚Ä¢ Import your own JSON files via API")
        print("   ‚Ä¢ Add/modify records directly in the database")
        
    except Exception as e:
        print(f"‚ùå Import failed: {e}")
        return False
    
    return True

if __name__ == "__main__":
    main()